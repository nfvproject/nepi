diff -ur --exclude='*.o' --exclude=cfparse.c --exclude='*~' mrouted-3.9.5/config.c mrouted-3.9.5-pl/config.c
--- mrouted-3.9.5/config.c	2011-03-05 21:45:25.000000000 +0100
+++ mrouted-3.9.5-pl/config.c	2011-08-29 16:32:43.710565000 +0200
@@ -91,11 +91,41 @@
 	v->uv_subnetbcast = subnet | ~mask;
 	strncpy(v->uv_name, ifa->ifa_name, sizeof(v->uv_name));
 
-	if (flags & IFF_POINTOPOINT)
+	if (flags & IFF_POINTOPOINT) {
 	    v->uv_flags |= VIFF_REXMIT_PRUNES;
+	    v->uv_ptp_addr = ((struct sockaddr_in *)ifa->ifa_dstaddr)->sin_addr.s_addr;
+	} else if (flags & IFF_BROADCAST) {
+	    /* getifaddr doesn't give us the p2p link in this case */
+	    /* So use ip, which uses netlink, to query it */
+	    char buf[1024];
+        size_t rode;
+        FILE *peer;
+        
+        logit(LOG_INFO,0,"Getting ptp for %s", ifa->ifa_name);
+        
+        snprintf(buf,sizeof(buf),"ip addr show %s | grep -o 'peer [0-9.]*' | grep -o '[0-9.]*'", ifa->ifa_name);
+        peer = popen(buf, "r");
+        rode = fread(buf, 1, sizeof(buf), peer);
+        pclose(peer);
+        
+        if (rode > 0) {
+            /* It has a pointopoint address */
+            struct in_addr ptp_in;
+            
+            for (--rode; rode && buf[rode] <= 13;)
+                --rode;
+            buf[++rode] = 0;
+
+            logit(LOG_INFO,0,"Got %s", buf);
+
+	        if (inet_aton(buf, &ptp_in))
+	            v->uv_ptp_addr = ptp_in.s_addr;
+        } 
+	}
 
-	logit(LOG_INFO,0,"installing %s (%s on subnet %s) as vif #%u - rate=%d",
+	logit(LOG_INFO,0,"installing %s (%s on subnet %s%s%s) as vif #%u - rate=%d",
 	    v->uv_name, inet_fmt(addr, s1, sizeof(s1)), inet_fmts(subnet, mask, s2, sizeof(s2)),
+	    (v->uv_ptp_addr) ? "peer " : "", (v->uv_ptp_addr) ? inet_fmt(v->uv_ptp_addr, s3, sizeof(s3)) : "",
 	    numvifs, v->uv_rate_limit);
 
 	++numvifs;
diff -ur --exclude='*.o' --exclude=cfparse.c --exclude='*~' mrouted-3.9.5/defs.h mrouted-3.9.5-pl/defs.h
--- mrouted-3.9.5/defs.h	2011-03-05 21:45:25.000000000 +0100
+++ mrouted-3.9.5-pl/defs.h	2011-08-30 15:30:23.691662000 +0200
@@ -9,6 +9,8 @@
 #ifndef __MROUTED_DEFS_H__
 #define __MROUTED_DEFS_H__
 
+#define PLANETLAB 1
+
 #include <stdio.h>
 #include <stdlib.h>
 #include <unistd.h>
@@ -28,6 +30,7 @@
 #include <sys/time.h>
 #include <sys/uio.h>
 #include <net/if.h>
+#include <arpa/inet.h>
 #include <netinet/in.h>
 #include <netinet/in_systm.h>
 #include <netinet/ip.h>
@@ -61,7 +64,7 @@
 #include <libutil.h>
 #endif
 #endif
-#ifdef RSRR
+#if defined(RSRR) || defined(PLANETLAB)
 #include <sys/un.h>
 #endif /* RSRR */
 
@@ -137,6 +140,11 @@
 extern u_int32		dvmrp_group;
 extern u_int32		dvmrp_genid;
 
+#ifdef PLANETLAB
+extern int      plrt_socket;
+extern char     *plrt_socket_path;
+#endif
+
 #define	IF_DEBUG(l)	if (debug && debug & (l))
 
 #define	DEBUG_PKT	0x0001
@@ -353,6 +361,8 @@
 extern void		k_leave(u_int32, u_int32);
 extern void		k_init_dvmrp(void);
 extern void		k_stop_dvmrp(void);
+extern void     k_init_plrt(void);
+extern void     k_stop_plrt(void);
 extern void		k_add_vif(vifi_t, struct uvif *);
 extern void		k_del_vif(vifi_t, struct uvif *);
 extern void		k_add_rg(u_int32, struct gtable *);
diff -ur --exclude='*.o' --exclude=cfparse.c --exclude='*~' mrouted-3.9.5/igmp.c mrouted-3.9.5-pl/igmp.c
--- mrouted-3.9.5/igmp.c	2011-03-05 21:45:25.000000000 +0100
+++ mrouted-3.9.5-pl/igmp.c	2011-08-29 17:03:24.187961000 +0200
@@ -190,8 +190,10 @@
     if (ip->ip_p == 0) {
 	if (src == 0 || dst == 0)
 	    logit(LOG_WARNING, 0, "kernel request not accurate");
-	else
+	else {
+	    logit(LOG_DEBUG, 0, "received kernel miss");
 	    add_table_entry(src, dst);
+    }
 	return;
     }
 
diff -ur --exclude='*.o' --exclude=cfparse.c --exclude='*~' mrouted-3.9.5/kern.c mrouted-3.9.5-pl/kern.c
--- mrouted-3.9.5/kern.c	2011-03-05 21:45:25.000000000 +0100
+++ mrouted-3.9.5-pl/kern.c	2011-08-31 15:09:21.457071000 +0200
@@ -7,16 +7,26 @@
  * Leland Stanford Junior University.
  */
 
+#include <paths.h>
 #include "defs.h"
 
 int curttl = 0;
 
+#ifdef PLANETLAB
+
+int plrt_socket;
+char *plrt_socket_path = _PATH_MROUTED_PLRT;
+
+#endif
+
 /*
  * Open/init the multicast routing in the kernel and sets the
  * MRT_PIM (aka MRT_ASSERT) flag in the kernel.
  */
 void k_init_dvmrp(void)
 {
+#ifndef PLANETLAB
+
 #ifdef OLD_KERNEL
     if (setsockopt(igmp_socket, IPPROTO_IP, MRT_INIT, (char *)NULL, 0) < 0) {
 #else
@@ -24,11 +34,34 @@
 
     if (setsockopt(igmp_socket, IPPROTO_IP, MRT_INIT, (char *)&v, sizeof(int)) < 0) {
 #endif
+
 	if (errno == EADDRINUSE)
 	    logit(LOG_ERR, 0, "Another multicast routing application is already running.");
 	else
 	    logit(LOG_ERR, errno, "Cannot enable multicast routing in kernel");
     }
+
+#endif
+}
+
+void k_init_plrt(void)
+{
+#ifdef PLANETLAB
+    /* 
+     * Just open a connection to the user-space forwarder
+     */
+
+    if ((plrt_socket = socket(AF_UNIX, SOCK_SEQPACKET, 0)) < 0) 
+	logit(LOG_ERR, errno, "PLRT socket");
+	
+	struct sockaddr_un sun;
+	memset(&sun, 0, sizeof(sun));
+	sun.sun_family = AF_UNIX;
+	strncpy(sun.sun_path, plrt_socket_path, sizeof(sun.sun_path));
+	
+    if ((connect(plrt_socket, &sun, sizeof(sun))) < 0) 
+	logit(LOG_ERR, errno, "PLRT socket connect");
+#endif
 }
 
 
@@ -38,8 +71,17 @@
  */
 void k_stop_dvmrp(void)
 {
+#ifndef PLANETLAB
     if (setsockopt(igmp_socket, IPPROTO_IP, MRT_DONE, (char *)NULL, 0) < 0)
 	logit(LOG_WARNING, errno, "Cannot disable multicast routing in kernel");
+#endif
+}
+
+void k_stop_plrt(void)
+{
+#ifdef PLANETLAB
+    close(plrt_socket);
+#endif
 }
 
 
@@ -194,11 +236,25 @@
  */
 void k_add_vif(vifi_t vifi, struct uvif *v)
 {
-    struct vifctl vc;
-
-    vc.vifc_vifi = vifi;
-    uvif_to_vifctl(&vc, v);
-    if (setsockopt(igmp_socket, IPPROTO_IP, MRT_ADD_VIF, (char *)&vc, sizeof(vc)) < 0)
+    /* 
+     * PlanetLab does application-level forwarding
+     */
+    struct {
+        u_int32 op;
+        u_int32 len;
+        struct vifctl vc;
+    } op;
+
+    op.vc.vifc_vifi = vifi;
+    uvif_to_vifctl(&op.vc, v);
+
+#ifdef PLANETLAB
+    op.op = MRT_ADD_VIF;
+    op.len = sizeof(op.vc);
+    if (send(plrt_socket, &op, sizeof(op), 0) < 0)
+#else
+    if (setsockopt(igmp_socket, IPPROTO_IP, MRT_ADD_VIF, (char *)&op.vc, sizeof(op.vc)) < 0)
+#endif
 	logit(LOG_ERR, errno, "setsockopt MRT_ADD_VIF on vif %d", vifi);
 }
 
@@ -214,6 +270,20 @@
      * we're going to delete.  *BSD systems on the other hand exepect only the index
      * of that VIF.
      */
+#ifdef PLANETLAB
+    struct {
+        u_int32 op;
+        u_int32 len;
+        struct vifctl vc;
+    } op;
+
+    op.vc.vifc_vifi = vifi;
+    uvif_to_vifctl(&op.vc, v);
+
+    op.op = MRT_DEL_VIF;
+    op.len = sizeof(op.vc);
+    if (send(plrt_socket, &op, sizeof(op), 0) < 0)
+#else
 #ifdef __linux__
     struct vifctl vc;
 
@@ -224,6 +294,7 @@
 #else /* *BSD et al. */
     if (setsockopt(igmp_socket, IPPROTO_IP, MRT_DEL_VIF, (char *)&vifi, sizeof(vifi)) < 0)
 #endif /* !__linux__ */
+#endif /* PLANETLAB */
     {
         if (errno == EADDRNOTAVAIL || errno == EINVAL)
             return;
@@ -238,31 +309,57 @@
  */
 void k_add_rg(u_int32 origin, struct gtable *g)
 {
-    struct mfcctl mc;
+    struct {
+        u_int32 op;
+        u_int32 len;
+        struct mfcctl mc;
+    } op;
+    
     vifi_t i;
 
 #ifdef DEBUG_MFC
     md_log(MD_ADD, origin, g->gt_mcastgrp);
 #endif
     /* copy table values so that setsockopt can process it */
-    mc.mfcc_origin.s_addr = origin;
+    op.mc.mfcc_origin.s_addr = origin;
 #ifdef OLD_KERNEL
-    mc.mfcc_originmask.s_addr = 0xffffffff;
+    op.mc.mfcc_originmask.s_addr = 0xffffffff;
 #endif
-    mc.mfcc_mcastgrp.s_addr = g->gt_mcastgrp;
-    mc.mfcc_parent = g->gt_route ? g->gt_route->rt_parent : NO_VIF;
+    op.mc.mfcc_mcastgrp.s_addr = g->gt_mcastgrp;
+    op.mc.mfcc_parent = g->gt_route ? g->gt_route->rt_parent : NO_VIF;
     for (i = 0; i < numvifs; i++)
-	mc.mfcc_ttls[i] = g->gt_ttls[i];
+	op.mc.mfcc_ttls[i] = g->gt_ttls[i];
+
+#ifdef PLANETLAB
+
+	logit(LOG_DEBUG, 0, "setsockopt MRT_ADD_MFC %s-%s %d[%d %d %d %d %d %d]", 
+	    inet_fmt(origin, s1, sizeof(s1)),
+	    inet_fmt(g->gt_mcastgrp, s2, sizeof(s2)),
+	    numvifs,
+	    op.mc.mfcc_ttls[0], op.mc.mfcc_ttls[1], op.mc.mfcc_ttls[2],
+	    op.mc.mfcc_ttls[3], op.mc.mfcc_ttls[4], op.mc.mfcc_ttls[5] );
+
+    /* Send to PlanetLab's user-space MRT daemon */
+    op.op = MRT_ADD_MFC;
+    op.len = sizeof(op.mc);
+    if (send(plrt_socket, &op, sizeof(op), 0) < 0)
+
+#else /* here if not PLANETLAB */
 
     /* write to kernel space */
     if (setsockopt(igmp_socket, IPPROTO_IP, MRT_ADD_MFC,
-		   (char *)&mc, sizeof(mc)) < 0) {
+		   (char *)&op.mc, sizeof(op.mc)) < 0) 
+   
+#endif /* PLANETLAB */
+   
+    {
 #ifdef DEBUG_MFC
 	md_log(MD_ADD_FAIL, origin, g->gt_mcastgrp);
 #endif
 	logit(LOG_WARNING, errno, "setsockopt MRT_ADD_MFC",
 		inet_fmt(origin, s1, sizeof(s1)), inet_fmt(g->gt_mcastgrp, s2, sizeof(s2)));
     }
+
 }
 
 
@@ -271,20 +368,37 @@
  */
 int k_del_rg(u_int32 origin, struct gtable *g)
 {
-    struct mfcctl mc;
+    struct {
+        u_int32 op;
+        u_int32 len;
+        struct mfcctl mc;
+    } op;
 
 #ifdef DEBUG_MFC
     md_log(MD_DEL, origin, g->gt_mcastgrp);
 #endif
     /* copy table values so that setsockopt can process it */
-    mc.mfcc_origin.s_addr = origin;
+    op.mc.mfcc_origin.s_addr = origin;
 #ifdef OLD_KERNEL
-    mc.mfcc_originmask.s_addr = 0xffffffff;
+    op.mc.mfcc_originmask.s_addr = 0xffffffff;
 #endif
-    mc.mfcc_mcastgrp.s_addr = g->gt_mcastgrp;
+    op.mc.mfcc_mcastgrp.s_addr = g->gt_mcastgrp;
+
+#ifdef PLANETLAB
+
+    /* Send to PlanetLab's user-space MRT daemon */
+    op.op = MRT_DEL_MFC;
+    op.len = sizeof(op.mc);
+    if (send(plrt_socket, &op, sizeof(op), 0) < 0)
+
+#else /* here if not PLANETLAB */
 
     /* write to kernel space */
-    if (setsockopt(igmp_socket, IPPROTO_IP, MRT_DEL_MFC, (char *)&mc, sizeof(mc)) < 0) {
+    if (setsockopt(igmp_socket, IPPROTO_IP, MRT_DEL_MFC, (char *)&op.mc, sizeof(op.mc)) < 0) 
+
+#endif /* PLANETLAB */
+    
+    {
 #ifdef DEBUG_MFC
 	md_log(MD_DEL_FAIL, origin, g->gt_mcastgrp);
 #endif
diff -ur --exclude='*.o' --exclude=cfparse.c --exclude='*~' mrouted-3.9.5/main.c mrouted-3.9.5-pl/main.c
--- mrouted-3.9.5/main.c	2011-03-05 21:45:25.000000000 +0100
+++ mrouted-3.9.5-pl/main.c	2011-08-30 15:31:01.281814000 +0200
@@ -52,9 +52,9 @@
 time_t mrouted_init_time;
 
 #ifdef SNMP
-#define NHANDLERS	34
+#define NHANDLERS	35
 #else
-#define NHANDLERS	2
+#define NHANDLERS	3
 #endif
 
 static struct ihandler {
@@ -206,6 +206,9 @@
     fputs("  -h, --help           Show this help text\n", stderr);
     fputs("  -p                   Disable pruning.  Deprecated, compatibility option\n", stderr);
     fputs("  -r, --show-routes    Show state of VIFs and multicast routing tables\n", stderr);
+#ifdef PLANETLAB
+    fputs("  -F                   Path to the PlanetLab userland forwarder, default /var/run/mcastfwd\n", stderr);
+#endif
     fprintf(stderr, "  -v, --version        Show %s version\n", __progname);
     fputs("\n", stderr);
 
@@ -258,11 +261,23 @@
 
     snprintf(versionstring, sizeof(versionstring), "mrouted version %s", todaysversion);
 
-    while ((ch = getopt_long(argc, argv, "c:d::fhpP::rv", long_options, NULL)) != EOF) {
+#ifdef PLANETLAB
+#define PLOPTIONS ":F"
+#else
+#define PLOPTIONS ""
+#endif
+
+    while ((ch = getopt_long(argc, argv, "c:d::fhpP::rv" PLOPTIONS, long_options, NULL)) != EOF) {
 	switch (ch) {
 	    case 'c':
 		configfilename = optarg;
 		break;
+		
+#ifdef PLANETLAB
+		case 'F':
+		plrt_socket_path = optarg;
+		break;
+#endif
 
 	    case 'd':
 		if (!optarg)
@@ -410,6 +425,8 @@
     init_ipip();
     init_routes();
     init_ktable();
+    k_init_plrt();
+
 #ifndef OLD_KERNEL
     /*
      * Unfortunately, you can't k_get_version() unless you've
@@ -422,6 +439,7 @@
     k_init_dvmrp();
     vers = k_get_version();
     k_stop_dvmrp();
+    
     /*XXX
      * This function must change whenever the kernel version changes
      */
@@ -466,6 +484,15 @@
        logit(LOG_ERR, 0, "Descriptor too big");
     FD_SET(igmp_socket, &readers);
     nfds = igmp_socket + 1;
+    
+#ifdef PLANETLAB
+    if (plrt_socket >= (int)FD_SETSIZE)
+       logit(LOG_ERR, 0, "Descriptor too big");
+    FD_SET(plrt_socket, &readers);
+    if (plrt_socket >= nfds)
+        nfds = plrt_socket + 1;
+#endif
+
     for (i = 0; i < nhandlers; i++) {
 	if (ihandlers[i].fd >= (int)FD_SETSIZE)
 	    logit(LOG_ERR, 0, "Descriptor too big");
@@ -602,6 +629,17 @@
 		accept_igmp(recvlen);
 	    }
 
+#ifdef PLANETLAB
+	    if (FD_ISSET(plrt_socket, &rfds)) {
+		recvlen = recvfrom(plrt_socket, recv_buf, RECV_BUF_SIZE, 0, NULL, &dummy);
+		if (recvlen < 0) {
+		    if (errno != EINTR) logit(LOG_ERR, errno, "recvfrom");
+		    continue;
+		}
+		accept_igmp(recvlen);
+	    }
+#endif
+
 	    for (i = 0; i < nhandlers; i++) {
 		if (FD_ISSET(ihandlers[i].fd, &rfds)) {
 		    (*ihandlers[i].func)(ihandlers[i].fd, &rfds);
@@ -808,6 +846,7 @@
 	if (did_final_init)
 	    k_stop_dvmrp();
     }
+    k_stop_plrt();
 }
 
 /*
diff -ur --exclude='*.o' --exclude=cfparse.c --exclude='*~' mrouted-3.9.5/Makefile mrouted-3.9.5-pl/Makefile
--- mrouted-3.9.5/Makefile	2011-03-05 21:45:25.000000000 +0100
+++ mrouted-3.9.5-pl/Makefile	2011-08-10 17:18:22.233596000 +0200
@@ -43,7 +43,7 @@
 
 ## Common
 CFLAGS        = $(MCAST_INCLUDE) $(SNMPDEF) $(RSRRDEF) $(INCLUDES) $(DEFS) $(USERCOMPILE)
-CFLAGS       += -O2 -W -Wall -Werror
+CFLAGS       += -O2 -W -Wall
 #CFLAGS       += -O -g
 LDLIBS        = $(SNMPLIBDIR) $(SNMPLIBS) $(EXTRA_LIBS)
 LDFLAGS      += -Wl,-Map,$@.map
Only in mrouted-3.9.5-pl: Makefile.bk
Only in mrouted-3.9.5-pl: map-mbone
Only in mrouted-3.9.5-pl: map-mbone.map
Only in mrouted-3.9.5-pl: mrinfo
Only in mrouted-3.9.5-pl: mrinfo.map
Only in mrouted-3.9.5-pl: mrouted
Only in mrouted-3.9.5-pl: mrouted.map
Only in mrouted-3.9.5-pl: mtrace
Only in mrouted-3.9.5-pl: mtrace.map
diff -ur --exclude='*.o' --exclude=cfparse.c --exclude='*~' mrouted-3.9.5/pathnames.h mrouted-3.9.5-pl/pathnames.h
--- mrouted-3.9.5/pathnames.h	2011-03-05 21:45:25.000000000 +0100
+++ mrouted-3.9.5-pl/pathnames.h	2011-08-29 13:10:27.043684000 +0200
@@ -14,5 +14,6 @@
 #define _PATH_MROUTED_GENID	_PATH_MROUTED_RUNDIR "/mrouted.genid"
 #define _PATH_MROUTED_DUMP	_PATH_MROUTED_RUNDIR "/mrouted.dump"
 #define _PATH_MROUTED_CACHE	_PATH_MROUTED_RUNDIR "/mrouted.cache"
+#define _PATH_MROUTED_PLRT	_PATH_VARRUN "mcastrt"
 
 #endif /* __MROUTED_PATHNAMES_H__ */
Only in mrouted-3.9.5-pl: vers.c
diff -ur --exclude='*.o' --exclude=cfparse.c --exclude='*~' mrouted-3.9.5/vif.c mrouted-3.9.5-pl/vif.c
--- mrouted-3.9.5/vif.c	2011-03-05 21:45:25.000000000 +0100
+++ mrouted-3.9.5-pl/vif.c	2011-08-31 19:26:52.955453000 +0200
@@ -139,6 +139,7 @@
     v->uv_lcl_addr	= 0;
     v->uv_rmt_addr	= 0;
     v->uv_dst_addr	= t ? 0 : dvmrp_group;
+    v->uv_ptp_addr  = 0;
     v->uv_subnet	= 0;
     v->uv_subnetmask	= 0;
     v->uv_subnetbcast	= 0;
@@ -379,6 +380,8 @@
 	    start_route_updates();
 	    update_route(p->pa_subnet, p->pa_subnetmask, 0, 0, vifi, NULL);
 	}
+	if (v->uv_ptp_addr)
+	    update_route(v->uv_ptp_addr, 0xffffffff, 0, 0, vifi, NULL);
 
 	/*
 	 * Until neighbors are discovered, assume responsibility for sending
@@ -526,6 +529,8 @@
 		    return(vifi);
 	    }
 	    else {
+		if (src == v->uv_ptp_addr)
+		    return(vifi);
 		if ((src & v->uv_subnetmask) == v->uv_subnet &&
 		    ((v->uv_subnetmask == 0xffffffff) ||
 		     (src != v->uv_subnetbcast)))
@@ -1666,6 +1671,10 @@
 			scaletime(now - v->uv_querier->al_ctime),
 			scaletime(v->uv_querier->al_timer));
 	}
+	if (0 != v->uv_ptp_addr) {
+	    fprintf(fp, "                     PtP remote: %-18s\n",
+				    inet_fmt(v->uv_ptp_addr, s1, sizeof(s1)));
+	}
 	if (v->uv_flags & VIFF_BLASTER)
 	    fprintf(fp, "                  blasterbuf size: %dk\n",
 			v->uv_blasterlen / 1024);
diff -ur --exclude='*.o' --exclude=cfparse.c --exclude='*~' mrouted-3.9.5/vif.h mrouted-3.9.5-pl/vif.h
--- mrouted-3.9.5/vif.h	2011-03-05 21:45:25.000000000 +0100
+++ mrouted-3.9.5-pl/vif.h	2011-08-29 14:35:35.695829000 +0200
@@ -109,6 +109,7 @@
     u_int32	     uv_lcl_addr;   /* local address of this vif            */
     u_int32	     uv_rmt_addr;   /* remote end-point addr (tunnels only) */
     u_int32	     uv_dst_addr;   /* destination for DVMRP/PIM messages   */
+    u_int32	     uv_ptp_addr;   /* remote peer address   (pointopoint only) */
     u_int32	     uv_subnet;     /* subnet number         (phyints only) */
     u_int32	     uv_subnetmask; /* subnet mask           (phyints only) */
     u_int32	     uv_subnetbcast;/* subnet broadcast addr (phyints only) */
